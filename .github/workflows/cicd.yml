name: CI/CD Pipeline

on:
  push:
    branches:
      - main

permissions:
  contents: read
  packages: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Setup Node.js (pour tests API)
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      # 3. Install + run tests API
      - name: Install API deps
        run: npm ci
        working-directory: ./app/api

      - name: Run API tests
        run: npm test
        working-directory: ./app/api

      # 4. Build Docker images (API + Frontend)
      - name: Build API Docker image
        run: |
          IMAGE_API=ghcr.io/${{ github.repository_owner }}/timi-api:latest
          IMAGE_API=$(echo $IMAGE_API | tr '[:upper:]' '[:lower:]')
          docker build -t $IMAGE_API ./app/api

      - name: Build Frontend Docker image
        run: |
          IMAGE_FE=ghcr.io/${{ github.repository_owner }}/timi-frontend:latest
          IMAGE_FE=$(echo $IMAGE_FE | tr '[:upper:]' '[:lower:]')
          docker build -t $IMAGE_FE ./app/frontend

      # 5. Push vers GHCR
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Push Docker images
        run: |
          IMAGE_API=ghcr.io/${{ github.repository_owner }}/timi-api:latest
          IMAGE_FE=ghcr.io/${{ github.repository_owner }}/timi-frontend:latest
          IMAGE_API=$(echo $IMAGE_API | tr '[:upper:]' '[:lower:]')
          IMAGE_FE=$(echo $IMAGE_FE | tr '[:upper:]' '[:lower:]')
          docker push $IMAGE_API
          docker push $IMAGE_FE

      # 6. Set up kubectl
      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: v1.29.0

      # 7. Auth au cluster Kubernetes (via KUBECONFIG secret)
      - name: Set kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG_DATA }}" | base64 --decode > $HOME/.kube/config

      # 8. DÃ©ployer manifests K8s
      - name: Apply Kubernetes manifests
        run: |
          kubectl apply -f k8s/ -n timi
          kubectl rollout status deployment timi-api -n timi
          kubectl rollout status deployment timi-frontend -n timi
